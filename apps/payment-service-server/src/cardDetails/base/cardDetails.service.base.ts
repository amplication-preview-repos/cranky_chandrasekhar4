/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CardDetails as PrismaCardDetails } from "@prisma/client";

export class CardDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CardDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cardDetails.count(args);
  }

  async cardDetailsItems(
    args: Prisma.CardDetailsFindManyArgs
  ): Promise<PrismaCardDetails[]> {
    return this.prisma.cardDetails.findMany(args);
  }
  async cardDetails(
    args: Prisma.CardDetailsFindUniqueArgs
  ): Promise<PrismaCardDetails | null> {
    return this.prisma.cardDetails.findUnique(args);
  }
  async createCardDetails(
    args: Prisma.CardDetailsCreateArgs
  ): Promise<PrismaCardDetails> {
    return this.prisma.cardDetails.create(args);
  }
  async updateCardDetails(
    args: Prisma.CardDetailsUpdateArgs
  ): Promise<PrismaCardDetails> {
    return this.prisma.cardDetails.update(args);
  }
  async deleteCardDetails(
    args: Prisma.CardDetailsDeleteArgs
  ): Promise<PrismaCardDetails> {
    return this.prisma.cardDetails.delete(args);
  }
}
