/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CardDetailsService } from "../cardDetails.service";
import { CardDetailsCreateInput } from "./CardDetailsCreateInput";
import { CardDetails } from "./CardDetails";
import { CardDetailsFindManyArgs } from "./CardDetailsFindManyArgs";
import { CardDetailsWhereUniqueInput } from "./CardDetailsWhereUniqueInput";
import { CardDetailsUpdateInput } from "./CardDetailsUpdateInput";

export class CardDetailsControllerBase {
  constructor(protected readonly service: CardDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CardDetails })
  async createCardDetails(
    @common.Body() data: CardDetailsCreateInput
  ): Promise<CardDetails> {
    return await this.service.createCardDetails({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cardNumber: true,
        expiration: true,
        postalCode: true,
        cvv: true,
        cardholderName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CardDetails] })
  @ApiNestedQuery(CardDetailsFindManyArgs)
  async cardDetailsItems(
    @common.Req() request: Request
  ): Promise<CardDetails[]> {
    const args = plainToClass(CardDetailsFindManyArgs, request.query);
    return this.service.cardDetailsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cardNumber: true,
        expiration: true,
        postalCode: true,
        cvv: true,
        cardholderName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CardDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cardDetails(
    @common.Param() params: CardDetailsWhereUniqueInput
  ): Promise<CardDetails | null> {
    const result = await this.service.cardDetails({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cardNumber: true,
        expiration: true,
        postalCode: true,
        cvv: true,
        cardholderName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CardDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCardDetails(
    @common.Param() params: CardDetailsWhereUniqueInput,
    @common.Body() data: CardDetailsUpdateInput
  ): Promise<CardDetails | null> {
    try {
      return await this.service.updateCardDetails({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          cardNumber: true,
          expiration: true,
          postalCode: true,
          cvv: true,
          cardholderName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CardDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCardDetails(
    @common.Param() params: CardDetailsWhereUniqueInput
  ): Promise<CardDetails | null> {
    try {
      return await this.service.deleteCardDetails({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          cardNumber: true,
          expiration: true,
          postalCode: true,
          cvv: true,
          cardholderName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
